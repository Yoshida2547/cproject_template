CC=gcc
EXCUTEABLE=a.out

WOKING_DIR=$(shell pwd)

EXTERNAL_DIR=$(WOKING_DIR)/external

BIN_DIR=$(WOKING_DIR)/bin
LIB_DIR=$(WOKING_DIR)/lib
SRC_DIR=$(WOKING_DIR)/src
OBJ_DIR=$(WOKING_DIR)/obj
INCLUDE_DIR=$(WOKING_DIR)/include
SHARE_DIR=$(WOKING_DIR)/share
TEMP_DIR=$(WOKING_DIR)/temp

SHARESRC_DIR=$(SRC_DIR)/share
SHAREOBJ_DIR=$(LIB_DIR)

DIRECTORIES:=$(EXTERNAL_DIR) $(BIN_DIR) $(LIB_DIR) $(SRC_DIR) $(OBJ_DIR) $(INCLUDE_DIR) $(SHARE_DIR) $(TEMP_DIR) $(SHARESRC_DIR) $(SHAREOBJ_DIR)

TARGET=$(BIN_DIR)/$(EXCUTEABLE)

INCLUDEFILES:=$(wildcard $(INCLUDE_DIR)/*.h)

SRCFILES:=$(wildcard $(SRC_DIR)/*.c)
OBJFILES:=$(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/%.o,$(SRCFILES))

SHARESRCFILES:=$(wildcard $(SHARESRC_DIR)/*.c)
SHAREOBJFILES:=$(patsubst $(SHARESRC_DIR)/%.c,$(SHAREOBJ_DIR)/lib%.so,$(SHARESRCFILES))

DEPENDENCYFILES:=$(patsubst $(OBJ_DIR)/%.o,$(TEMP_DIR)/%.d,$(OBJFILES)) $(patsubst $(SHAREOBJ_DIR)/%.so,$(TEMP_DIR)/%.d,$(SHAREOBJFILES))

LIBRARYPATHS:=$(LIB_DIR)
LIBRARYFLAGS:=$(addprefix -L,$(LIBRARYPATHS))

INCLUDEDPATHS:=$(INCLUDE_DIR)
INCLUDEDFLAGS:=$(addprefix -I,$(INCLUDEDPATHS))

USEDLIBRAIES=m myvec
USEDLIBRAIESFLAGS:=$(addprefix -l,$(USEDLIBRAIES))

DEPENDENCYFLAGE=-MMD -MP -MF $(patsubst $(OBJ_DIR)/%.o,$(TEMP_DIR)/%.d,$@)
SHAREDEPENDENCYFLAGE=-MMD -MP -MF $(patsubst $(SHAREOBJ_DIR)/%.so,$(TEMP_DIR)/%.d,$@)

COMPILEFLAGS:=-Wall -g

all: $(TARGET)
	@LD_LIBRARY_PATH=$(LIB_DIR) $<

$(TARGET): $(OBJFILES) $(SHAREOBJFILES)
	@$(CC) $(COMPILEFLAGS) -o $@ $(OBJFILES) $(LIBRARYFLAGS) $(USEDLIBRAIESFLAGS)

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c
	@$(CC) -c $(COMPILEFLAGS) $(INCLUDEDFLAGS) $(DEPENDENCYFLAGE) -o $@ $<

$(SHAREOBJ_DIR)/lib%.so: $(SHARESRC_DIR)/%.c
	@$(CC) -fpic -shared $(COMPILEFLAGS) $(INCLUDEDFLAGS) $(SHAREDEPENDENCYFLAGE) -o $@ $<

.PHONY: init
init:
	@echo "$(addprefix -I\n,$(INCLUDEDPATHS))" > compile_flags.txt
	@mkdir $(DIRECTORIES)

.PHONY: clean
clean:
	@rm $(OBJFILES) $(SHAREOBJFILES) $(TARGET) $(DEPENDENCYFILES)

.PHONY: t
t:
	@echo $(DEPENDENCYFILES)

-include $(DEPENDENCYFILES)
